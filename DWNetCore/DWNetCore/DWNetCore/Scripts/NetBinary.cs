//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;

public class NetBinaryWriter
{
    BinaryWriter m_bw;
    MemoryStream m_ms;
    public NetBinaryWriter()
    {
        m_ms = new MemoryStream();
        m_bw = new BinaryWriter(m_ms);
    }
    public void PushByte(byte value)
    {
        m_bw.Write(value);
    }
    public void PushBool(bool value)
    {
        m_bw.Write(value);
    }
    public void PushUInt16(UInt16 value)
    {
        m_bw.Write(System.Net.IPAddress.HostToNetworkOrder((short)value));
    }
    public void PushUInt32(UInt32 value)
    {
        m_bw.Write(System.Net.IPAddress.HostToNetworkOrder((int)value));
    }
    public void PushUInt64(UInt64 value)
    {
        m_bw.Write(System.Net.IPAddress.HostToNetworkOrder((long)value));
    }
    public void PushString(byte[] value)
    {
        if (value != null)
        {
            PushUInt16((UInt16)value.Length);
            m_bw.Write(value);
        }
        else
        {
            PushUInt16(0);
        }
    }

    public void PushString(string value)
    {
        if (value != null)
        {
            PushUInt16((UInt16)value.Length);
            m_bw.Write(value);
        }
        else
        {
            PushUInt16(0);
        }
    }

    public void PushData(byte[] value)
    {
        m_bw.Write(value);
    }
    public byte[] getBytes()
    {
        UInt16 Len = (UInt16)m_bw.BaseStream.Length;
        byte[] data = new byte[Len + 2];
        UInt16 NetLen = (UInt16)System.Net.IPAddress.HostToNetworkOrder((short)Len);
        Buffer.BlockCopy(System.BitConverter.GetBytes(NetLen), 0, data, 0, 2);
        Buffer.BlockCopy(m_ms.GetBuffer(), 0, data, 2, Len);
        return data;
    }

}
public class NetBinaryReader
{
    BinaryReader m_br;
    public NetBinaryReader(byte[] data)
    {
        m_br = new BinaryReader(new MemoryStream(data));
    }
    public byte PopByte()
    {
        return m_br.ReadByte();
    }
    public bool popBool()
    {
        return m_br.ReadBoolean();
    }
    public UInt16 popUInt16()
    {
        return (UInt16)System.Net.IPAddress.NetworkToHostOrder((short)m_br.ReadUInt16());
    }
    public UInt32 popUInt32()
    {
        return (UInt32)System.Net.IPAddress.NetworkToHostOrder((int)m_br.ReadUInt32());
    }
    public UInt64 popUInt64()
    {
        return (UInt64)System.Net.IPAddress.NetworkToHostOrder((long)m_br.ReadUInt64());
    }
    public byte[] popString()
    {
        UInt16 len = popUInt16();
        return m_br.ReadBytes(len);
    }
    public byte[] popData(UInt16 len)
    {
        return m_br.ReadBytes(len);
    }
    public byte[] popLastData()
    {
        return m_br.ReadBytes(UInt16.MaxValue);
    }
}

